AC_INIT(src/cabocha.cpp)
AH_TEMPLATE([HAVE_TLS_KEYWORD], [])
AH_TEMPLATE([HAVE_ICONV_EUC_JP_MS], [])
AH_TEMPLATE([HAVE_ICONV_CP932], [])
AM_INIT_AUTOMAKE(cabocha, 0.68)
AM_MAINTAINER_MODE

# MODEL_VERSION XXYY
MODEL_VERSION="102"

# Before making a release, the LTVERSION string should be modified.
# The string is of the form C:R:A.
# - If interfaces have been changed or added, but binary compatibility has
#   been preserved, change to C+1:0:A+1
# - If binary compatibility has been broken (eg removed or changed interfaces)
#   change to C+1:0:0
# - If the interface is the same as the previous version, change to C:R+1:A
LTVERSION="4:0:0"
AC_SUBST(LTVERSION)

AC_PROG_CC
AC_PROG_CXX
AC_PROG_GCC_TRADITIONAL
AC_PROG_MAKE_SET
AC_LIBTOOL_WIN32_DLL
AM_PROG_LIBTOOL
AC_ISC_POSIX
AC_CYGWIN
AM_ICONV
AC_LANG_CPLUSPLUS
AC_LANG(C)
AC_HEADER_STDC
AC_C_CONST
AC_C_BIGENDIAN
AC_CHECK_HEADERS(string.h stdlib.h unistd.h fcntl.h \
                 sys/stat.h sys/mman.h sys/times.h sys/types.h dirent.h \
                 ctype.h sys/types.h io.h windows.h pthread.h)
AC_TYPE_OFF_T
AC_TYPE_SIZE_T
AC_CHECK_SIZEOF(char)
AC_CHECK_SIZEOF(short)
AC_CHECK_SIZEOF(int)
AC_CHECK_SIZEOF(long)
AC_CHECK_SIZEOF(long long)
AC_CHECK_SIZEOF(size_t)
AC_TYPE_SIZE_T

AC_FUNC_MMAP
AC_CHECK_FUNCS(getenv)
AC_CHECK_FUNCS(opendir)
AC_CHECK_FUNCS(snprintf)
AC_LANG(C++)

if test -n "$GCC"; then
   CFLAGS="-O3  -Wno-deprecated -Wall"
   CXXFLAGS="-O3 -Wno-deprecated -Wall"
fi

AC_ARG_WITH(
    charset,
     [  --with-charset=charset  set default charset (EUC-JP|CP932|UTF8))],
     [CHARSET=${withval}], [CHARSET='EUC-JP']
)

AC_ARG_WITH(
    posset,
     [  --with-posset=charset  set default charset (IPA|JUMAN|UNIDIC))],
     [POSSET=${withval}], [POSSET='IPA']
)
POSSET=`echo $POSSET|tr a-z A-Z`
POSSET2=`echo $POSSET|tr A-Z a-z`

if test "$POSSET" = "IPA"; then
 POSSET="IPA"
else
 if test "$POSSET" = "JUMAN"; then
  POSSET="JUMAN"
 else
   if test "$POSSET" = "UNIDIC"; then
    POSSET="UNIDIC"
   else
    AC_ERROR(uknown posset: ${POSSET})
   fi
 fi
fi
AC_SUBST(POSSET)
AC_SUBST(POSSET2)

AC_ARG_ENABLE(utf8-only,
[  --enable-utf8-only            use utf8 only [default no]])
if test "$enable_utf8_only" = "yes"; then
CABOCHA_USE_UTF8_ONLY="-DCABOCHA_USE_UTF8_ONLY"
CHARSET="UTF-8"
else
CABOCHA_USE_UTF8_ONLY=""
fi
AC_SUBST(CABOCHA_USE_UTF8_ONLY)
AC_SUBST(CHARSET)

AC_ARG_WITH(
  mecab-config,
  [  --with-mecab-config=PATH  set mecab-config location [search path]],
  AC_MSG_RESULT(using $with_mecab_config for mecab-config)
  MECAB_CONFIG=$with_mecab_config,
  [AC_PATH_PROGS(MECAB_CONFIG, mecab-config, no)]
)

if test $MECAB_CONFIG != "no";
then
  MECAB_LIBS=`$MECAB_CONFIG --libs`
  LIBS="$LIBS $MECAB_LIBS"
fi


AC_MSG_CHECKING(whether iconv supports EUC-JP-MS and CP932)
if iconv -l | grep -i 'euc-jp-ms' > /dev/null; then
AC_DEFINE([HAVE_ICONV_EUC_JP_MS])
fi

if iconv -l | grep -i 'cp932' > /dev/null; then
AC_DEFINE([HAVE_ICONV_CP932])
fi

AC_CHECK_LIB(stdc++, main, STDCPP_LIBS="-lstdc++")
AC_CHECK_LIB(crfpp,  crfpp_new, STDCRFPP_LIBS="-lcrfpp")
AC_CHECK_LIB(mecab,  mecab_new, CRFPP_LIBS="-lmecab")
LIBS="$STDCRFPP_LIBS $CRFPP_LIBS $LIBS $LIBICONV"
CABOCHA_LIBS="$LIBS"
AC_SUBST(CABOCHA_LIBS)
AC_SUBST(MECAB_CFLAGS)

dnl
dnl check C++ features
dnl
AC_DEFUN(CHECK_CXX_STL, [
  AC_MSG_CHECKING(if ${CXX-c++} supports stl <$1> (required))
  AC_TRY_COMPILE(
	[
	  #include <$1>
	], [
	;
	], [
	  ac_stl_$1=yes
	], [
	  config_error=yes
	  AC_WARN(${CXX-c++} stl <$1> does not work)
        ])
  AC_MSG_RESULT([$ac_stl_$1])
])

CHECK_CXX_STL(vector)
CHECK_CXX_STL(list)
CHECK_CXX_STL(map)
CHECK_CXX_STL(set)
CHECK_CXX_STL(queue)
CHECK_CXX_STL(functional)
CHECK_CXX_STL(algorithm)
CHECK_CXX_STL(string)
CHECK_CXX_STL(iostream)
CHECK_CXX_STL(strstream)
CHECK_CXX_STL(fstream)

# check for const_cast
AC_MSG_CHECKING([if ${CXX-c++} supports template <class T> (required)])
AC_TRY_COMPILE(
[
   template <class T> T foo (T &i) { return i++; };
],[
   int i = 0;
   double d = 0.0;
   foo(i); foo(d);
],[
  ac_template=yes
],[
  AC_WARN(${CXX-c++} template <class T> does not work)
  config_error=yes
])
AC_MSG_RESULT([$ac_template])

# check for const_cast
AC_MSG_CHECKING([if ${CXX-c++} supports const_cast<> (required)])
AC_TRY_COMPILE(
[
   class foo;
],[
   const foo *c=0;
   foo *c1=const_cast<foo*>(c);
],[
  ac_const_cast=yes
],[
  AC_WARN(${CXX-c++} const_cast<> does not work)
  config_error=yes
])
AC_MSG_RESULT([$ac_const_cast])

# check for static_cast<>
AC_MSG_CHECKING(if ${CXX-c++} supports static_cast<> (required))
AC_TRY_COMPILE(
[
   class foo;
],[
   foo *c = 0;
   void *c1 = static_cast<void *>(c);
],[
  ac_static_cast=yes
],[
  AC_WARN(${CXX-c++} static_cast<> does not work)
  config_error=yes
])
AC_MSG_RESULT([$ac_static_cast])

# check for dynamic_cast<>
AC_MSG_CHECKING(if ${CXX-c++} supports dynamic_cast<> (required))
AC_TRY_COMPILE(
[
   class foo {};
   class bar: public foo {};
],[
   bar *c = 0;
   foo *c1 = dynamic_cast<foo *>(c);
],[
  ac_dynamic_cast=yes
],[
  AC_WARN(${CXX-c++} dynamic_cast<> does not work)
  config_error=yes
])
AC_MSG_RESULT([$ac_dynamic_cast])

# check for reinterpret_cast
AC_MSG_CHECKING(if ${CXX-c++} supports reinterpret_cast<> (required))
AC_TRY_COMPILE(
[
  int *a = 0;
],[
   char *p = reinterpret_cast<char *>(a);
],[
  ac_reinterpret_cast=yes
],[
  AC_WARN(${CXX-c++} reinterpret_cast<> does not work)
  config_error=yes
])
AC_MSG_RESULT([$ac_reinterpret_cast])

# check for try
AC_MSG_CHECKING(if ${CXX-c++} supports exception handler (required))
AC_TRY_COMPILE(
[
  ;
],[
   try {
      int i = 0;
   }
   catch (char *e) {
   }
   catch (...) {
   }
],[
  ac_exception=yes
],[
  AC_WARN(${CXX-c++} exception does not work)
  config_error=yes
])
AC_MSG_RESULT([$ac_exception])

# check for namespaces
AC_MSG_CHECKING(if ${CXX-c++} supports namespaces (required) )
AC_TRY_COMPILE(
[
namespace Foo { struct A {}; }
using namespace Foo;
],[
A a;
],[
 ac_namespaces=yes
dnl AC_DEFINE(HAVE_CXX_NAMESPACE)
],[
 config_error=yes
 ac_namespaces=no
])
AC_MSG_RESULT([$ac_namespaces])


dnl __thread keyword
AC_MSG_CHECKING([if ${CXX-c++} supports __thread (optional)])
AC_TRY_COMPILE(
[
__thread int a = 0;
],[
  a = 10;
],[
 enable_tls=yes
],[
 enable_tls=no
])
AC_MSG_RESULT([$enable_tls])

if test "$enable_tls" = "no"; then
AC_MSG_WARN([__thread keyword is not supported on this environment. \
Error handling of CaboCha, e.g., CaboCha::getLastError(), is not thread safe.])
else
AC_DEFINE([HAVE_TLS_KEYWORD])
fi

AC_MSG_CHECKING(if ${CXX-c++} environment provides all required features)
if test "x$config_error" = xyes ; then
  AC_MSG_RESULT([no])
  AC_MSG_ERROR([Your compiler is not powerful enough to compile CaboCha. \
        If it should be, see config.log for more information of why it failed.])
fi
AC_MSG_RESULT([yes])

case "$host_os" in
 mingw* | os2*)
  CABOCHA_DEFAULT_RC='c:\\\\Program Files\\\\cabocharc\\\\etc\\\\cabocharc'
  ;;
 *)
  MECAB_DEFAULT_RC="$sysconfdir/cabocharc"
  ;;
esac

AC_SUBST(MODEL_VERSION)
AC_SUBST(CABOCHA_DEFAULT_RC)
AC_SUBST(datarootdir)

CABOCHA_DEFAULT_RC="$sysconfdir/cabocharc"
CABOCHA_TXTMODEL_LIST=`(cd model; echo *.txt)`
CABOCHA_MODEL_LIST=`(cd model; echo *.txt | sed s/.txt/.model/g)`
AC_SUBST(CABOCHA_TXTMODEL_LIST)
AC_SUBST(CABOCHA_MODEL_LIST)

AM_CONFIG_HEADER(config.h)
AC_OUTPUT([Makefile
          src/Makefile
	  src/Makefile.msvc
	  model/Makefile
	  man/Makefile
	  swig/version.h
	  cabocha-config
	  cabocharc
	  cabocha.iss
	  ],
	  chmod +x cabocha-config
	  )
