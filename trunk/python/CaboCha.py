# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.33
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _CaboCha
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


EUC_JP = _CaboCha.EUC_JP
CP932 = _CaboCha.CP932
UTF8 = _CaboCha.UTF8
ASCII = _CaboCha.ASCII
IPA = _CaboCha.IPA
JUMAN = _CaboCha.JUMAN
FORMAT_TREE = _CaboCha.FORMAT_TREE
FORMAT_LATTICE = _CaboCha.FORMAT_LATTICE
FORMAT_TREE_LATTICE = _CaboCha.FORMAT_TREE_LATTICE
FORMAT_XML = _CaboCha.FORMAT_XML
FORMAT_NONE = _CaboCha.FORMAT_NONE
INPUT_RAW_SENTENCE = _CaboCha.INPUT_RAW_SENTENCE
INPUT_POS = _CaboCha.INPUT_POS
INPUT_CHUNK = _CaboCha.INPUT_CHUNK
INPUT_SELECTION = _CaboCha.INPUT_SELECTION
INPUT_DEP = _CaboCha.INPUT_DEP
OUTPUT_RAW_SENTENCE = _CaboCha.OUTPUT_RAW_SENTENCE
OUTPUT_POS = _CaboCha.OUTPUT_POS
OUTPUT_CHUNK = _CaboCha.OUTPUT_CHUNK
OUTPUT_SELECTION = _CaboCha.OUTPUT_SELECTION
OUTPUT_DEP = _CaboCha.OUTPUT_DEP
TRAIN_NE = _CaboCha.TRAIN_NE
TRAIN_CHUNK = _CaboCha.TRAIN_CHUNK
TRAIN_DEP = _CaboCha.TRAIN_DEP
class Chunk(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Chunk, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Chunk, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_getmethods__["link"] = _CaboCha.Chunk_link_get
    if _newclass:link = _swig_property(_CaboCha.Chunk_link_get)
    __swig_getmethods__["head_pos"] = _CaboCha.Chunk_head_pos_get
    if _newclass:head_pos = _swig_property(_CaboCha.Chunk_head_pos_get)
    __swig_getmethods__["func_pos"] = _CaboCha.Chunk_func_pos_get
    if _newclass:func_pos = _swig_property(_CaboCha.Chunk_func_pos_get)
    __swig_getmethods__["token_size"] = _CaboCha.Chunk_token_size_get
    if _newclass:token_size = _swig_property(_CaboCha.Chunk_token_size_get)
    __swig_getmethods__["token_pos"] = _CaboCha.Chunk_token_pos_get
    if _newclass:token_pos = _swig_property(_CaboCha.Chunk_token_pos_get)
    __swig_getmethods__["score"] = _CaboCha.Chunk_score_get
    if _newclass:score = _swig_property(_CaboCha.Chunk_score_get)
    __swig_getmethods__["feature_list_size"] = _CaboCha.Chunk_feature_list_size_get
    if _newclass:feature_list_size = _swig_property(_CaboCha.Chunk_feature_list_size_get)
    def feature_list(*args): return _CaboCha.Chunk_feature_list(*args)
Chunk_swigregister = _CaboCha.Chunk_swigregister
Chunk_swigregister(Chunk)

class Token(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Token, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Token, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_getmethods__["surface"] = _CaboCha.Token_surface_get
    if _newclass:surface = _swig_property(_CaboCha.Token_surface_get)
    __swig_getmethods__["normalized_surface"] = _CaboCha.Token_normalized_surface_get
    if _newclass:normalized_surface = _swig_property(_CaboCha.Token_normalized_surface_get)
    __swig_getmethods__["feature"] = _CaboCha.Token_feature_get
    if _newclass:feature = _swig_property(_CaboCha.Token_feature_get)
    __swig_getmethods__["feature_list_size"] = _CaboCha.Token_feature_list_size_get
    if _newclass:feature_list_size = _swig_property(_CaboCha.Token_feature_list_size_get)
    __swig_getmethods__["ne"] = _CaboCha.Token_ne_get
    if _newclass:ne = _swig_property(_CaboCha.Token_ne_get)
    __swig_getmethods__["chunk"] = _CaboCha.Token_chunk_get
    if _newclass:chunk = _swig_property(_CaboCha.Token_chunk_get)
    def feature_list(*args): return _CaboCha.Token_feature_list(*args)
Token_swigregister = _CaboCha.Token_swigregister
Token_swigregister(Token)

class Tree(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tree, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Tree, name)
    __repr__ = _swig_repr
    def set_sentence(*args): return _CaboCha.Tree_set_sentence(*args)
    def sentence(*args): return _CaboCha.Tree_sentence(*args)
    def sentence_size(*args): return _CaboCha.Tree_sentence_size(*args)
    def chunk(*args): return _CaboCha.Tree_chunk(*args)
    def token(*args): return _CaboCha.Tree_token(*args)
    def read(*args): return _CaboCha.Tree_read(*args)
    def empty(*args): return _CaboCha.Tree_empty(*args)
    def clear(*args): return _CaboCha.Tree_clear(*args)
    def clear_chunk(*args): return _CaboCha.Tree_clear_chunk(*args)
    def chunk_size(*args): return _CaboCha.Tree_chunk_size(*args)
    def token_size(*args): return _CaboCha.Tree_token_size(*args)
    def size(*args): return _CaboCha.Tree_size(*args)
    def toString(*args): return _CaboCha.Tree_toString(*args)
    def charset(*args): return _CaboCha.Tree_charset(*args)
    def set_charset(*args): return _CaboCha.Tree_set_charset(*args)
    def posset(*args): return _CaboCha.Tree_posset(*args)
    def set_posset(*args): return _CaboCha.Tree_set_posset(*args)
    def output_layer(*args): return _CaboCha.Tree_output_layer(*args)
    def set_output_layer(*args): return _CaboCha.Tree_set_output_layer(*args)
    def __init__(self, *args): 
        this = _CaboCha.new_Tree(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _CaboCha.delete_Tree
    __del__ = lambda self : None;
Tree_swigregister = _CaboCha.Tree_swigregister
Tree_swigregister(Tree)

class Parser(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Parser, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Parser, name)
    __repr__ = _swig_repr
    def parseToString(*args): return _CaboCha.Parser_parseToString(*args)
    def parse(*args): return _CaboCha.Parser_parse(*args)
    def what(*args): return _CaboCha.Parser_what(*args)
    __swig_getmethods__["version"] = lambda x: _CaboCha.Parser_version
    if _newclass:version = staticmethod(_CaboCha.Parser_version)
    __swig_destroy__ = _CaboCha.delete_Parser
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _CaboCha.new_Parser(*args)
        try: self.this.append(this)
        except: self.this = this
Parser_swigregister = _CaboCha.Parser_swigregister
Parser_swigregister(Parser)
Parser_version = _CaboCha.Parser_version

VERSION = _CaboCha.VERSION


